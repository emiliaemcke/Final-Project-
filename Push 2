// The different things i want to instruct the user to draw: a bee, a boat, a guitar, a hot air ballon
// so far missing bee 
// I also then initially want it to be controlled by something simple like the pressing of keeps and then once I have understood that aybe attempt something more complex
// i started by creating a sort of basis for this to work
// starting by playing with text a little bit next I need to figure out how to use Pshape and such to draw groups of lines into shapes! 
// Mouse image
// Mouse image
PImage mouseIcon; 

// Illustration
PShape shapeGroup; // store shape inside of Pshape
PShape drawingShape;
PShape drawShape;
int currentMode = 1;
color currentColor = color(0);

// Animation
float weightAnimation = 0;
boolean playAnimation = false;
PVector objectPosition;  // alter the position of the drawing of whatever the user has created 

// Guitar objects
PImage note;
ArrayList<Note> listNotes;
int timer = 0;

void setup () {
  size(1000, 800);

  // Load images
  mouseIcon = loadImage ("Harold.png"); // for the user 
  note = loadImage("note.png"); // for the guitar drawing
  note.resize(0, 100); // make bigger 

  //list of notes
  listNotes = new ArrayList<Note>();

  // Set initial shape mode
  shapeGroup = createShape(GROUP);   // First shape group then drawing shape then draw shape -->  save group of shapes  (groups of lines)
  drawingShape = createShape(GROUP); // To save group of shape (lines)
  drawShape = createShape();         // Line

  noCursor();  // Don't show the cursor
  textFont(loadFont("font.vlw"));  // Set an font
} 


void draw () {

  colorMode(RGB, 255);
  background(255);  // Draw the background 

  DrawLine();

 // Drawing the text that guides the animation 
  fill(0);
  textSize(32);
  if (playAnimation) {
    textAlign(LEFT, TOP);
    text("Animating...", 10, 10);
    textAlign(RIGHT, TOP);
  } else {
    textAlign(RIGHT, TOP);
    text("Change type with key 1-4", width-10, 10);
    text("'R' to clear", width-10, 50);
    text("'Q' undo the drawing", width-10, 90);
  }

  // Show on screen the shapes
  ShowShapes();

  // Show color pallette
  colorMode(HSB, 100);
  for (int y = 0; y < 100; y++) {
    stroke(y, 100, 100);
    line(0, height-y, 50, height-y);
  }
  for (int y = 0; y < 100; y++) {
    stroke(100, 0, y);
    line(50, height-y, 100, height-y);
  }

  // Show actual color
  noStroke();
  fill(currentColor);
  rect(width-100, height-100, 100, 100);

  // Show mouse icon
  imageMode(CORNER);
  image(mouseIcon, mouseX-4, mouseY-14);
}

void ShowShapes() {
  pushMatrix();

  if (currentMode == 1) { // to decide which different drawing or animation you are currently in
    DrawAirBallon();
  } else if (currentMode == 2) { // // to decide which different drawing or animation you are currently in
    DrawBoat();
  } else if (currentMode == 3) {
    DrawGuitar();
  } else if (currentMode == 4) {
    DrawBee();
  }

  // Make lines movement on animation
  if (playAnimation && shapeGroup.getChildCount()>0) {
    int i = 0;
    for (PShape shapePart : shapeGroup.getChildren()) {  // Per each group of lines
      if (playAnimation && shapePart.getChildCount()>0) {
        for (PShape shape : shapePart.getChildren()) {  // Per each line
          shape.beginShape();
          shape.strokeWeight((sin((float)(i+weightAnimation)/10) + 1.5) * 5); // adjust strokeweight
          shape.endShape();
          weightAnimation += 0.005;
          i++;
        }
      }
    }
  }

  shape(shapeGroup, 0, 0);    // Show family of shapes
  shape(drawingShape, 0, 0);  // Show group of actul drawing shapes

  popMatrix();
}

void DrawLine() {
  if (mousePressed && !playAnimation) {  // Create line each frame

    // Don't draw out of the screen
    if (!(mouseX>=0 && mouseX<=width && mouseY>=0 && mouseY<=height)) {
      return;
    }

    // Just select color
    if (mouseX>=0 && mouseX<=100) { 
      if (mouseY>=height-100 && mouseY<=height) {

        colorMode(HSB, 100);
        if (mouseX>=0 && mouseX<=50) {
          if (mouseY>=height-100 && mouseY<=height) {
            currentColor = color(height-mouseY, 100, 100);
          }
        } else if (mouseX>50 && mouseX<=100) {
          if (mouseY>=height-100 && mouseY<=height) {
            currentColor = color(100, 0, height-mouseY);
          }
        }

        return;
      }
    }

    drawShape.beginShape();  // Start to draw

    // Set line properties
    drawShape.noFill();
    drawShape.stroke(currentColor);
    drawShape.strokeJoin(ROUND);
    drawShape.strokeCap(ROUND);
    drawShape.strokeWeight((sin((float)weightAnimation/5) + 1.5) * 5);
    // What I want to do is vectors to calculate the location of the drawings and then make the lines look more interesting 
    // Calculate movement to add more details in the line
    
    PVector previousMouse = new PVector(pmouseX, pmouseY);
    PVector actualMouse = new PVector(mouseX, mouseY);
    PVector drawPos = previousMouse.copy();
    PVector distMouse = PVector.sub(actualMouse, previousMouse);
    distMouse.div(10);

    // Draw the line
    drawShape.vertex(pmouseX, pmouseY);  //  cooirdinates for first vertex
    for (int i=0; i<10; i++) {
      drawShape.vertex(drawPos.x, drawPos.y);  // second vertex
      drawPos.add(distMouse);                  // mve the second vertex 
    }
    drawShape.vertex(mouseX, mouseY);  // Last vertex

    drawShape.endShape();  // End draw

    drawingShape.addChild(drawShape);  // Add line to group of lines --  Found this advice on a processing forum https://forum.processing.org/two/discussion/8811/pshape-group-how-to-remove-child Add the two "child" shapes (lines) to the parent group
    drawShape = createShape();  // Clear for new line 

    weightAnimation++;  // Add for different stroke weight
  }
}

void keyPressed() {
  if (!playAnimation) {
    if (key == 'r') {  // Delete drawing
      shapeGroup = createShape(GROUP);
    } else if (key == 'q') {  // Undo group of lines
      if (shapeGroup.getChildCount()>0) // Returns the number of children within the PShape
        shapeGroup.removeChild(shapeGroup.getChildCount()-1); // if it is bigger than 0, than remove "child" shapes from the parent group to erase the entire drawing
    }
  }

  if (key == ' ') {
    if (playAnimation) {  // Reset animation
      playAnimation = false;
      weightAnimation = 0;
    } else {  // Play animation
      playAnimation = true;
      objectPosition = new PVector();
    }
  }

  // choose which drawing you are currenyly doing 
  switch(key) { // works like else but better for more than one or the other 
  case '1':
    currentMode = 1; // which mode you are in ( which drawing)
    break;
  case '2':
    currentMode = 2;
    break;
  case '3':
    currentMode = 3;
    break;
  case '4':
    currentMode = 4;
    break;
  }
}

// Add group of lines to family shape 
void mouseReleased() {
  if (!playAnimation) {
    shapeGroup.addChild(drawingShape);
    drawingShape = createShape(GROUP);
  }
}

////// next tab 

void DrawBee() {

  if (!playAnimation) {  // Show the title
    fill(0);
    textSize(32);
    textAlign(LEFT, TOP);
    text("Draw a bee!", 10, 10);
  } else {                  // Animate the scene
    objectPosition.x+=2;
    objectPosition.y-=2;
    translate(width/2, height/2);
    rotate(radians(sin((float)millis()/200) * 5));
    translate(-width/2, -height/2);
    translate(objectPosition.x, objectPosition.y);

    if (objectPosition.x>width) {
      playAnimation = false;
      objectPosition = new PVector();
    }
  }
}

//// next tab 
void DrawBoat() {

  if (!playAnimation) {  // Show the title
    fill(0);
    textSize(32);
    textAlign(LEFT, TOP);
    text("Draw a boat!", 10, 10);
  } else {                  // Animate the scene
    objectPosition.x+=2;
    translate(width/2, height/2);
    rotate(radians(sin((float)millis()/200) * 2));
    translate(-width/2, -height/2);
    translate(objectPosition.x, objectPosition.y);

    if (objectPosition.x>width) {
      playAnimation = false;
      objectPosition = new PVector();
    }
  }
}

////// Next tab 
void DrawGuitar() {

  if (!playAnimation) {  // Show the title
    fill(0);
    textSize(32);
    textAlign(LEFT, TOP);
    text("Draw a guitar!", 10, 10);
  } else {                  // Animate the scene
    translate(width/2, height/2);
    rotate(radians(sin((float)millis()/200) * 2));
    scale(1 - cos((float)millis()/200)*0.05);
    translate(-width/2, -height/2);

    if (objectPosition.x>width) {
      playAnimation = false;
      objectPosition = new PVector();
    }

    // Each 60 frames, add a new note
    if (playAnimation) {
      if (timer % 60 == 0) { // if the remainder is 0 then add a new note
        listNotes.add(new Note(width/2, height/2));
      }
      timer++;
    }
  }

  // Per each note
  for (int i=listNotes.size()-1; i>=0; i--) {
    Note n = listNotes.get(i);

    if (n.destroy) {  // Destroy if is outside of the screen
      listNotes.remove(i);  
      continue;
    }

    // Update the note
    n.Move();
    n.Show();
  }
}

class Note {

  PVector pos;   // Position
  PVector dir;   // Random direction to move
  PImage img;    // The image of the note
  boolean destroy; // To know when to destroy

  // Constructor
  Note(int x, int y) {
    pos = new PVector(x, y);  // Set initial position
    img = note;               // Set image

    dir = new PVector(random(-1, 2), random(-1, 2));  // Set random direction  
    dir.normalize();  // Magnitude equal to 1
    dir.mult(random(2, 4));  // Random speed
  }

  // Move the note
  void Move() {
    pos.add(dir);

    // If is out of the screen, destroy the note
    if (pos.x<0 || pos.x>width || pos.y<0 || pos.y>height) {
      destroy = true;
    }
  }

  // Show the note in the current position
  void Show() {
    imageMode(CENTER);
    image(img, pos.x, pos.y);
  }
}

///// next tab 

void DrawAirBallon() {

  if (!playAnimation) {  // Show the title
    fill(0);
    textSize(32);
    textAlign(LEFT, TOP);
    text("Draw a hot-air balloon!", 10, 10);
  } else {  // Animate the scene
    objectPosition.y-=2;  
    translate(width/2, height/2);
    rotate(radians(sin((float)millis()/200) * 2));
    translate(-width/2, -height/2);
    translate(objectPosition.x, objectPosition.y);

    if (objectPosition.y<-height) {
      playAnimation = false;
      objectPosition = new PVector();
    }
  }
}


